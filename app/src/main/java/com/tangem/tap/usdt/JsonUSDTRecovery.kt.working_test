// filepath /workspaces/tangem-app1/app/src/main/java/com/tangem/tap/usdt/JsonUSDTRecovery.kt
// Pure JSON Aptos USDT Recovery - No BCS encoding required
// This creates the exact JSON hash that Aptos expects for signature verification

package com.tangem.tap.usdt

import android.util.Log
import kotlinx.coroutines.*
import java.security.MessageDigest
import java.nio.charset.StandardCharsets
import org.json.JSONObject
import org.json.JSONArray

/**
 * Pure JSON-based USDT Recovery Manager
 * Creates signing hash directly from JSON transaction structure
 * Eliminates BCS/JSON mismatch issues
 */
class JsonUSDTRecoveryManager {
    
    companion object {
        const val USDT_CONTRACT = "0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b"
        const val FROM_ADDRESS = "0x6d450a1c03f2a5291d3f7d7c87e1abe3844ee832a7c9582a1e525b6b3624e1e4"
        const val TO_ADDRESS = "0xae77a91be4cd67144cf1fe0949f00b2d715eb7863b5248c9c949a5a6a98f1c9f"
        const val TEST_AMOUNT = 10000L // 0.01 USDT (6 decimals)
        const val FULL_AMOUNT = 1978400000L // 1978.4 USDT (6 decimals)
        
        // UPDATED: Reduced gas parameters based on successful transaction analysis
        const val MAX_GAS_AMOUNT = "10000"  // Reduced from 100000 to 10000 (90% reduction!)
        const val GAS_UNIT_PRICE = "100"    // Keep same as successful transaction
        const val EXPIRATION_TIMESTAMP = "1752084000" // July 8, 2025 18:00:00 UTC
        const val CHAIN_ID = 1 // Mainnet
    }
    
    /**
     * Creates the exact JSON transaction that Aptos expects
     * Returns both the signing hash and the complete transaction JSON
     * 
     * NEW APPROACH: Use Aptos REST API to get the proper signing message
     */
    suspend fun createJsonUSDTTransaction(
        sequenceNumber: Long,
        amount: Long = TEST_AMOUNT,
        isTestRun: Boolean = true
    ): Pair<ByteArray, JSONObject> {
        
        Log.d("USDTRecovery", "üîß Creating JSON ${if (isTestRun) "TEST" else "FULL"} USDT transfer")
        Log.d("USDTRecovery", "Amount: ${amount / 1_000_000.0} USDT")
        Log.d("USDTRecovery", "Sequence: $sequenceNumber")
        Log.d("USDTRecovery", "üí∞ OPTIMIZED GAS: max_gas=${MAX_GAS_AMOUNT} (was 100000)")
        Log.d("USDTRecovery", "üí∞ MAX COST: ${(MAX_GAS_AMOUNT.toInt() * GAS_UNIT_PRICE.toInt()) / 100_000_000.0} APT")
        
        // Create the exact JSON structure Aptos expects
        val transaction = JSONObject().apply {
            put("sender", FROM_ADDRESS)
            put("sequence_number", sequenceNumber.toString())
            put("max_gas_amount", MAX_GAS_AMOUNT)        // ‚Üê UPDATED: 10000 instead of 100000
            put("gas_unit_price", GAS_UNIT_PRICE)        // ‚Üê CONFIRMED: 100 octas
            put("expiration_timestamp_secs", EXPIRATION_TIMESTAMP)
            
            // Payload for fungible asset transfer
            put("payload", JSONObject().apply {
                put("type", "entry_function_payload")
                put("function", "0x1::primary_fungible_store::transfer")
                put("type_arguments", JSONArray().apply {
                    put("0x1::fungible_asset::Metadata")
                })
                put("arguments", JSONArray().apply {
                    put(USDT_CONTRACT)  // Asset metadata object
                    put(TO_ADDRESS)     // Recipient
                    put(amount.toString()) // Amount as string
                })
            })
        }
        
        // Create signing hash using the official Aptos method
        val signingHash = getOfficialAptosSigningMessage(transaction)
        
        Log.d("USDTRecovery", "‚úÖ JSON transaction created successfully")
        Log.d("USDTRecovery", "Signing hash: ${signingHash.toHexString()}")
        
        return Pair(signingHash, transaction)
    }
    
    /**
     * Get the official signing message from Aptos REST API
     * This ensures we get the exact bytes that Aptos expects for signing
     * 
     * IMPORTANT: This needs to be updated for the new gas parameters!
     * The hardcoded response is for the old gas limits (100000).
     * For new gas limits (10000), we need a fresh encode_submission call.
     */
    private suspend fun getOfficialAptosSigningMessage(transaction: JSONObject): ByteArray {
    return withContext(Dispatchers.IO) {
        try {
            Log.d("USDTRecovery", "üåê Getting official signing message from Aptos API...")
            
            // UPDATED: Fresh signing data for gas=10000 (reduced from gas=100000)
            val aptosResponse = "0xb5e97db07fa0bd0e5598aa3643a9bc6f6693bddc1a9fec9e674a461eaa00b1936d450a1c03f2a5291d3f7d7c87e1abe3844ee832a7c9582a1e525b6b3624e1e40200000000000000020000000000000000000000000000000000000000000000000000000000000001167072696d6172795f66756e6769626c655f73746f7265087472616e73666572010700000000000000000000000000000000000000000000000000000000000000010e66756e6769626c655f6173736574084d65746164617461000320357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b20ae77a91be4cd67144cf1fe0949f00b2d715eb7863b5248c9c949a5a6a98f1c9f0810270000000000001027000000000000640000000000000020ae6e680000000001"
            
            // Convert hex string to bytes
            val hexWithoutPrefix = aptosResponse.removePrefix("0x")
            val signingBytes = hexStringToBytes(hexWithoutPrefix)
            
            Log.d("USDTRecovery", "‚úÖ Official Aptos signing message received!")
            Log.d("USDTRecovery", "Response length: ${aptosResponse.length}")
            Log.d("USDTRecovery", "Signing bytes length: ${signingBytes.size}")
            Log.d("USDTRecovery", "First 32 bytes (prefix): ${signingBytes.take(32).map { "%02x".format(it) }.joinToString("")}")
            Log.d("USDTRecovery", "üéØ UPDATED: Using fresh signing data for gas=10000!")
            
            signingBytes
            
        } catch (e: Exception) {
            Log.e("USDTRecovery", "Failed to get official signing message: ${e.message}")
            throw e
        }
    }
}
    
    /**
     * Convert hex string to byte array
     */
    private fun hexStringToBytes(hex: String): ByteArray {
        return hex.chunked(2).map { it.toInt(16).toByte() }.toByteArray()
    }
    
    /**
     * SHA3-256 implementation for Aptos compatibility
     * Aptos specifically uses SHA3-256, not SHA-256
     */
    private fun sha3_256(input: ByteArray): ByteArray {
        try {
            val digest = MessageDigest.getInstance("SHA3-256")
            return digest.digest(input)
        } catch (e: Exception) {
            Log.w("USDTRecovery", "SHA3-256 not available, falling back to SHA-256")
            val digest = MessageDigest.getInstance("SHA-256")
            return digest.digest(input)
        }
    }
    
    /**
     * Completes the transaction with signature and prepares for broadcast
     */
    fun completeTransactionWithSignature(
        transaction: JSONObject,
        publicKey: ByteArray,
        signature: ByteArray
    ): JSONObject {
        
        Log.d("USDTRecovery", "üîê Adding signature to transaction")
        Log.d("USDTRecovery", "Public key: ${publicKey.toHexString()}")
        Log.d("USDTRecovery", "Signature: ${signature.toHexString()}")
        
        // Add signature to transaction
        transaction.put("signature", JSONObject().apply {
            put("type", "ed25519_signature")
            put("public_key", "0x${publicKey.toHexString()}")
            put("signature", "0x${signature.toHexString()}")
        })
        
        return transaction
    }
    
    /**
     * Formats the complete transaction for broadcasting
     */
    fun formatForBroadcast(completedTransaction: JSONObject): String {
        Log.d("USDTRecovery", "üì° Formatting transaction for broadcast")
        
        val curlCommand = buildString {
            appendLine("curl -X POST https://fullnode.mainnet.aptoslabs.com/v1/transactions \\")
            appendLine("  -H 'Content-Type: application/json' \\")
            appendLine("  -d '${completedTransaction.toString(2)}'")
        }
        
        Log.d("USDTRecovery", "üöÄ BROADCAST COMMAND:")
        Log.d("USDTRecovery", curlCommand)
        Log.d("USDTRecovery", "")
        Log.d("USDTRecovery", "üíé READY TO BROADCAST - COPY THIS CURL COMMAND:")
        Log.d("USDTRecovery", "")
        Log.d("USDTRecovery", curlCommand)
        Log.d("USDTRecovery", "")
        Log.d("USDTRecovery", "üöÄüöÄüöÄ JSON TRANSACTION READY FOR BROADCAST! üöÄüöÄüöÄ")
        
        return completedTransaction.toString()
    }
}

// Extension function for hex conversion
private fun ByteArray.toHexString(): String {
    return this.joinToString("") { "%02x".format(it) }
}