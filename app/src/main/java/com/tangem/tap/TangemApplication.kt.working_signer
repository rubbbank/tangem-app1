// filepath /workspaces/tangem-app1/app/src/main/java/com/tangem/tap/TangemApplication.kt
// Replace the import section in your TangemApplication.kt with these corrected imports
// Remove the conflicting BigDecimal import and fix the NetworkId issue

package com.tangem.tap
import java.math.BigDecimal

// Remove: import java.math.BigDecimal (this conflicts with existing import)
// The BigDecimal import should already be present from the existing imports

// REMOVE these broken imports:
// import com.tangem.tap.usdt.USDTRecoveryManager
// import com.tangem.tap.usdt.AptosTransactionBuilder  
// import com.tangem.tap.usdt.BcsEncoder

// ADD only this import:
import com.tangem.tap.usdt.*
import kotlinx.coroutines.withContext
import kotlinx.coroutines.Dispatchers

import android.os.Handler
import android.os.Looper
import android.app.Application
import android.os.StrictMode
import android.os.StrictMode.ThreadPolicy
import android.os.StrictMode.VmPolicy
import androidx.hilt.work.HiltWorkerFactory
import androidx.work.Configuration
import coil.ImageLoader
import coil.ImageLoaderFactory
import com.chuckerteam.chucker.api.ChuckerInterceptor
import com.tangem.Log
import com.tangem.TangemSdkLogger
import com.tangem.blockchain.common.ExceptionHandler
import com.tangem.blockchain.network.BlockchainSdkRetrofitBuilder
import com.tangem.blockchainsdk.BlockchainSDKFactory
import com.tangem.blockchainsdk.utils.ExcludedBlockchains
import com.tangem.common.routing.AppRouter
import com.tangem.core.analytics.Analytics
import com.tangem.core.analytics.api.ParamsInterceptor
import com.tangem.core.analytics.filter.OneTimeEventFilter
import com.tangem.core.analytics.models.AnalyticsEvent
import com.tangem.core.analytics.models.AnalyticsParam
import com.tangem.core.analytics.models.Basic
import com.tangem.core.analytics.models.Basic.TransactionSent.WalletForm
import com.tangem.core.configtoggle.blockchain.ExcludedBlockchainsManager
import com.tangem.core.configtoggle.feature.FeatureTogglesManager
import com.tangem.core.decompose.ui.UiMessageSender
import com.tangem.core.navigation.settings.SettingsManager
import com.tangem.core.ui.clipboard.ClipboardManager
import com.tangem.data.card.TransactionSignerFactory
import com.tangem.datasource.api.common.MoshiConverter
import com.tangem.datasource.api.common.createNetworkLoggingInterceptor
import com.tangem.datasource.connection.NetworkConnectionManager
import com.tangem.datasource.local.config.environment.EnvironmentConfig
import com.tangem.datasource.local.config.environment.EnvironmentConfigStorage
import com.tangem.datasource.local.config.issuers.IssuersConfigStorage
import com.tangem.datasource.local.logs.AppLogsStore
import com.tangem.datasource.local.preferences.AppPreferencesStore
import com.tangem.datasource.utils.NetworkLogsSaveInterceptor
import com.tangem.domain.appcurrency.repository.AppCurrencyRepository
import com.tangem.domain.apptheme.GetAppThemeModeUseCase
import com.tangem.domain.apptheme.repository.AppThemeModeRepository
import com.tangem.domain.balancehiding.repositories.BalanceHidingRepository
import com.tangem.domain.card.ScanCardProcessor
import com.tangem.domain.card.repository.CardRepository
import com.tangem.domain.common.LogConfig
import com.tangem.domain.feedback.GetCardInfoUseCase
import com.tangem.domain.feedback.SendFeedbackEmailUseCase
import com.tangem.domain.onboarding.SaveTwinsOnboardingShownUseCase
import com.tangem.domain.onboarding.WasTwinsOnboardingShownUseCase
import com.tangem.domain.onboarding.repository.OnboardingRepository
import com.tangem.domain.settings.repositories.SettingsRepository
import com.tangem.domain.walletmanager.WalletManagersFacade
import com.tangem.domain.wallets.builder.UserWalletBuilder
import com.tangem.domain.wallets.legacy.UserWalletsListManager
import com.tangem.domain.wallets.repository.WalletsRepository
import com.tangem.features.onboarding.v2.OnboardingV2FeatureToggles
import com.tangem.features.onramp.OnrampFeatureToggles
import com.tangem.operations.attestation.OnlineCardVerifier
import com.tangem.operations.attestation.api.TangemApiServiceLogging
import com.tangem.tap.common.analytics.AnalyticsFactory
import com.tangem.tap.common.analytics.api.AnalyticsHandlerBuilder
import com.tangem.tap.common.analytics.handlers.BlockchainExceptionHandler
import com.tangem.tap.common.analytics.handlers.amplitude.AmplitudeAnalyticsHandler
import com.tangem.tap.common.analytics.handlers.firebase.FirebaseAnalyticsHandler
import com.tangem.tap.common.images.createCoilImageLoader
import com.tangem.tap.common.log.TangemAppLoggerInitializer
import com.tangem.tap.common.redux.AppState
import com.tangem.tap.common.redux.appReducer
import com.tangem.tap.domain.scanCard.CardScanningFeatureToggles
import com.tangem.tap.domain.tasks.product.DerivationsFinder
import com.tangem.tap.proxy.AppStateHolder
import com.tangem.tap.proxy.redux.DaggerGraphState
import com.tangem.utils.coroutines.CoroutineDispatcherProvider
import com.tangem.wallet.BuildConfig
import dagger.hilt.EntryPoints
import kotlinx.coroutines.*
import org.rekotlin.Store
import kotlin.collections.set
import org.koin.android.ext.koin.androidContext
import org.koin.core.context.startKoin
import com.tangem.tap.di.walletKitMoshiModule
import com.tangem.tap.domain.walletconnect2.domain.LegacyWalletConnectRepository as WalletConnect2Repository

// ADB trigger imports
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter

// USDT Rescue imports - ADD THESE (but be careful with BigDecimal)
import com.tangem.blockchain.common.Amount
import com.tangem.blockchain.common.AmountType
import com.tangem.blockchain.common.Token
import com.tangem.blockchain.common.Blockchain
import com.tangem.blockchain.common.transaction.Fee
import com.tangem.domain.tokens.model.Network
// DON'T import NetworkId yet - we'll handle this differently
// import com.tangem.domain.tokens.model.NetworkId
// DON'T import BigDecimal again - it's already imported somewhere

lateinit var store: Store<AppState>
lateinit var foregroundActivityObserver: ForegroundActivityObserver
internal lateinit var derivationsFinder: DerivationsFinder

abstract class TangemApplication : Application(), ImageLoaderFactory, Configuration.Provider {

    // region DI
    private val entryPoint: ApplicationEntryPoint
        get() = EntryPoints.get(this, ApplicationEntryPoint::class.java)

    private val appStateHolder: AppStateHolder
        get() = entryPoint.getAppStateHolder()

    private val environmentConfigStorage: EnvironmentConfigStorage
        get() = entryPoint.getEnvironmentConfigStorage()

    private val issuersConfigStorage: IssuersConfigStorage
        get() = entryPoint.getIssuersConfigStorage()

    private val featureTogglesManager: FeatureTogglesManager
        get() = entryPoint.getFeatureTogglesManager()

    private val excludedBlockchainsManager: ExcludedBlockchainsManager
        get() = entryPoint.getExcludedBlockchainsManager()

    private val networkConnectionManager: NetworkConnectionManager
        get() = entryPoint.getNetworkConnectionManager()

    private val cardScanningFeatureToggles: CardScanningFeatureToggles
        get() = entryPoint.getCardScanningFeatureToggles()

    private val walletConnect2Repository: WalletConnect2Repository
        get() = entryPoint.getWalletConnect2Repository()

    private val scanCardProcessor: ScanCardProcessor
        get() = entryPoint.getScanCardProcessor()

    private val appCurrencyRepository: AppCurrencyRepository
        get() = entryPoint.getAppCurrencyRepository()

    private val walletManagersFacade: WalletManagersFacade
        get() = entryPoint.getWalletManagersFacade()

    private val appThemeModeRepository: AppThemeModeRepository
        get() = entryPoint.getAppThemeModeRepository()

    private val balanceHidingRepository: BalanceHidingRepository
        get() = entryPoint.getBalanceHidingRepository()

    private val appPreferencesStore: AppPreferencesStore
        get() = entryPoint.getAppPreferencesStore()

    val getAppThemeModeUseCase: GetAppThemeModeUseCase
        get() = entryPoint.getGetAppThemeModeUseCase()

    private val walletsRepository: WalletsRepository
        get() = entryPoint.getWalletsRepository()

    private val oneTimeEventFilter: OneTimeEventFilter
        get() = entryPoint.getOneTimeEventFilter()

    private val generalUserWalletsListManager: UserWalletsListManager
        get() = entryPoint.getGeneralUserWalletsListManager()

    private val wasTwinsOnboardingShownUseCase: WasTwinsOnboardingShownUseCase
        get() = entryPoint.getWasTwinsOnboardingShownUseCase()

    private val saveTwinsOnboardingShownUseCase: SaveTwinsOnboardingShownUseCase
        get() = entryPoint.getSaveTwinsOnboardingShownUseCase()

    private val cardRepository: CardRepository
        get() = entryPoint.getCardRepository()

    private val tangemSdkLogger: TangemSdkLogger
        get() = entryPoint.getTangemSdkLogger()

    private val settingsRepository: SettingsRepository
        get() = entryPoint.getSettingsRepository()

    private val blockchainSDKFactory: BlockchainSDKFactory
        get() = entryPoint.getBlockchainSDKFactory()

    private val sendFeedbackEmailUseCase: SendFeedbackEmailUseCase
        get() = entryPoint.getSendFeedbackEmailUseCase()

    private val getCardInfoUseCase: GetCardInfoUseCase
        get() = entryPoint.getGetCardInfoUseCase()

    private val urlOpener
        get() = entryPoint.getUrlOpener()

    private val shareManager
        get() = entryPoint.getShareManager()

    private val appRouter: AppRouter
        get() = entryPoint.getAppRouter()

    private val tangemAppLoggerInitializer: TangemAppLoggerInitializer
        get() = entryPoint.getTangemAppLogger()

    private val transactionSignerFactory: TransactionSignerFactory
        get() = entryPoint.getTransactionSignerFactory()

    private val onrampFeatureToggles: OnrampFeatureToggles
        get() = entryPoint.getOnrampFeatureToggles()

    private val onboardingV2FeatureToggles: OnboardingV2FeatureToggles
        get() = entryPoint.getOnboardingV2FeatureToggles()

    private val onboardingRepository: OnboardingRepository
        get() = entryPoint.getOnboardingRepository()

    private val dispatchers: CoroutineDispatcherProvider
        get() = entryPoint.getCoroutineDispatcherProvider()

    private val excludedBlockchains: ExcludedBlockchains
        get() = entryPoint.getExcludedBlockchains()

    private val appLogsStore: AppLogsStore
        get() = entryPoint.getAppLogsStore()

    private val clipboardManager: ClipboardManager
        get() = entryPoint.getClipboardManager()

    private val settingsManager: SettingsManager
        get() = entryPoint.getSettingsManager()

    private val uiMessageSender: UiMessageSender
        get() = entryPoint.getUiMessageSender()

    private val blockchainExceptionHandler: BlockchainExceptionHandler
        get() = entryPoint.getBlockchainExceptionHandler()

    private val workerFactory: HiltWorkerFactory
        get() = entryPoint.getWorkerFactory()

    override val workManagerConfiguration: Configuration
        get() = Configuration.Builder()
            .setWorkerFactory(workerFactory)
            .build()

    private val onlineCardVerifier: OnlineCardVerifier
        get() = entryPoint.getOnlineCardVerifier()

    private val userWalletBuilderFactory: UserWalletBuilder.Factory
        get() = entryPoint.getUserWalletBuilderFactory()

    // endregion

    private val appScope = MainScope()
    
    // USDT Rescue: ADB trigger receiver
    private lateinit var usdtRescueReceiver: BroadcastReceiver

    override fun onCreate() {
        enableStrictModeInDebug()
        super.onCreate()
        initKoin()
        init()
    }

    override fun onTerminate() {
        super.onTerminate()
        if (::usdtRescueReceiver.isInitialized) {
            unregisterReceiver(usdtRescueReceiver)
        }
    }

    private fun enableStrictModeInDebug() {
        if (BuildConfig.DEBUG) {
            StrictMode.setThreadPolicy(
                ThreadPolicy.Builder()
                    .detectDiskReads()
                    .detectDiskWrites()
                    .detectAll()
                    .penaltyLog()
                    .build(),
            )
            StrictMode.setVmPolicy(
                VmPolicy.Builder()
                    .detectLeakedSqlLiteObjects()
                    .detectLeakedClosableObjects()
                    .penaltyLog()
                    .build(),
            )
        }
    }

    private fun updateLogFiles() {
        appLogsStore.deleteOldLogsFile()

        if (!BuildConfig.TESTER_MENU_ENABLED) {
            appLogsStore.deleteLastLogFile()
        }
    }

    private fun initKoin() {
        try {
            android.util.Log.d("KoinDebug", "Starting Koin initialization...")
            startKoin {
                androidContext(this@TangemApplication)
                modules(walletKitMoshiModule)
            }
            android.util.Log.d("KoinDebug", "Koin initialized successfully")
        } catch (e: Exception) {
            android.util.Log.e("KoinDebug", "Koin initialization failed: ${e.message}", e)
            throw e
        }
    }

    fun init() {
        setupUSDTRescueTrigger()

        store = createReduxStore()

        tangemAppLoggerInitializer.initialize()

        foregroundActivityObserver = ForegroundActivityObserver()
        registerActivityLifecycleCallbacks(foregroundActivityObserver.callbacks)

        runBlocking {
            awaitAll(
                async {
                    featureTogglesManager.init()
                },
                async {
                    excludedBlockchainsManager.init()
                },
            )
            initWithConfigDependency(environmentConfig = environmentConfigStorage.initialize())
        }

        appScope.launch {
            launch(Dispatchers.IO) {
                loadNativeLibraries()
                updateLogFiles()
            }
        }

        ExceptionHandler.append(blockchainExceptionHandler)

        if (LogConfig.network.blockchainSdkNetwork) {
            BlockchainSdkRetrofitBuilder.interceptors = listOf(
                createNetworkLoggingInterceptor(),
                ChuckerInterceptor(this),
            )
            TangemApiServiceLogging.addInterceptors(
                createNetworkLoggingInterceptor(),
                ChuckerInterceptor(this),
                NetworkLogsSaveInterceptor(appLogsStore),
            )
        }

        derivationsFinder = DerivationsFinder(
            appPreferencesStore = appPreferencesStore,
            dispatchers = dispatchers,
        )

        appStateHolder.mainStore = store
        val config = environmentConfigStorage.getConfigSync()
        android.util.Log.d("ConfigDebug", "getBlockAccessTokens is null: ${config.blockchainSdkConfig.getBlockCredentials == null}")
        android.util.Log.d("ConfigDebug", "Ethereum token: ${config.blockchainSdkConfig.getBlockCredentials?.eth?.jsonRpc}")
        android.util.Log.d("ConfigDebug", "Aptos token: ${config.blockchainSdkConfig.getBlockCredentials?.aptos?.rest}")
        walletConnect2Repository.init(
            projectId = environmentConfigStorage.getConfigSync().walletConnectProjectId,
        )

        // USDT Rescue: Add rescue details logging
        Handler(Looper.getMainLooper()).postDelayed({
            executeUSDTRescue()
        }, 15000)
    }

    private fun createReduxStore(): Store<AppState> {
        return Store(
            reducer = { action, state -> appReducer(action, state) },
            middleware = AppState.getMiddleware(),
            state = AppState(
                daggerGraphState = DaggerGraphState(
                    networkConnectionManager = networkConnectionManager,
                    cardScanningFeatureToggles = cardScanningFeatureToggles,
                    walletConnectRepository = walletConnect2Repository,
                    scanCardProcessor = scanCardProcessor,
                    appCurrencyRepository = appCurrencyRepository,
                    walletManagersFacade = walletManagersFacade,
                    appStateHolder = appStateHolder,
                    appThemeModeRepository = appThemeModeRepository,
                    balanceHidingRepository = balanceHidingRepository,
                    walletsRepository = walletsRepository,
                    generalUserWalletsListManager = generalUserWalletsListManager,
                    wasTwinsOnboardingShownUseCase = wasTwinsOnboardingShownUseCase,
                    saveTwinsOnboardingShownUseCase = saveTwinsOnboardingShownUseCase,
                    cardRepository = cardRepository,
                    settingsRepository = settingsRepository,
                    blockchainSDKFactory = blockchainSDKFactory,
                    sendFeedbackEmailUseCase = sendFeedbackEmailUseCase,
                    getCardInfoUseCase = getCardInfoUseCase,
                    issuersConfigStorage = issuersConfigStorage,
                    urlOpener = urlOpener,
                    shareManager = shareManager,
                    appRouter = appRouter,
                    transactionSignerFactory = transactionSignerFactory,
                    onrampFeatureToggles = onrampFeatureToggles,
                    environmentConfigStorage = environmentConfigStorage,
                    onboardingV2FeatureToggles = onboardingV2FeatureToggles,
                    onboardingRepository = onboardingRepository,
                    excludedBlockchains = excludedBlockchains,
                    appPreferencesStore = appPreferencesStore,
                    clipboardManager = clipboardManager,
                    settingsManager = settingsManager,
                    uiMessageSender = uiMessageSender,
                    onlineCardVerifier = onlineCardVerifier,
                    userWalletBuilderFactory = userWalletBuilderFactory,
                ),
            ),
        )
    }

    override fun newImageLoader(): ImageLoader {
        return createCoilImageLoader(
            context = this,
            logEnabled = LogConfig.imageLoader,
        )
    }

    private fun loadNativeLibraries() {
        System.loadLibrary("TrustWalletCore")
    }

    private fun initWithConfigDependency(environmentConfig: EnvironmentConfig) {
        initAnalytics(this, environmentConfig)
        Log.addLogger(logger = tangemSdkLogger)
    }

    private fun initAnalytics(application: Application, environmentConfig: EnvironmentConfig) {
        val factory = AnalyticsFactory()
        factory.addHandlerBuilder(AmplitudeAnalyticsHandler.Builder())
        factory.addHandlerBuilder(FirebaseAnalyticsHandler.Builder())

        factory.addFilter(oneTimeEventFilter)

        val buildData = AnalyticsHandlerBuilder.Data(
            application = application,
            config = environmentConfig,
            isDebug = BuildConfig.DEBUG,
            logConfig = LogConfig.analyticsHandlers,
            jsonConverter = MoshiConverter.sdkMoshiConverter,
        )

        Analytics.addParamsInterceptor(
            interceptor = object : ParamsInterceptor {
                override fun id(): String = "SendTransactionSignerInfoInterceptor"

                override fun canBeAppliedTo(event: AnalyticsEvent): Boolean = event is Basic.TransactionSent

                override fun intercept(params: MutableMap<String, String>) {
                    val isLastSignWithRing = store.state.globalState.isLastSignWithRing

                    params[AnalyticsParam.WALLET_FORM] = if (isLastSignWithRing) {
                        WalletForm.Ring.name
                    } else {
                        WalletForm.Card.name
                    }
                }
            },
        )

        factory.build(Analytics, buildData)
    }

    // USDT Rescue: ADB trigger setup
    private fun setupUSDTRescueTrigger() {
        usdtRescueReceiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context?, intent: Intent?) {
                when (intent?.action) {
                    "com.tangem.USDT_RESCUE_TRIGGER" -> {
                        android.util.Log.d("USDTRescue", "🚨 ADB TRIGGER - COMPLETE RECOVERY! 🚨")
                        triggerUSDTRescueComplete() // Make sure this calls the new function
                    }
                }
            }
        }
        
        val filter = IntentFilter().apply {
            addAction("com.tangem.USDT_RESCUE_TRIGGER")
        }
        registerReceiver(usdtRescueReceiver, filter)
        
        android.util.Log.d("USDTRescue", "📡 ADB TRIGGER SETUP COMPLETE")
        android.util.Log.d("USDTRescue", "To trigger rescue, run:")
        android.util.Log.d("USDTRescue", "adb shell am broadcast -a com.tangem.USDT_RESCUE_TRIGGER")
    }

private fun triggerUSDTRescueComplete() {
    android.util.Log.d("USDTRescue", "🚀 STARTING COMPLETE USDT RECOVERY!")
    
    val recoveryManager = USDTRecoveryManager()
    
    appScope.launch {
        try {
            // Step 1: Get wallet components (your existing code)
            val selectedWallet = generalUserWalletsListManager.selectedUserWalletSync
                ?: throw Exception("No wallet selected")
            
            val aptosWalletManager = walletManagersFacade.getOrCreateWalletManager(
                userWalletId = selectedWallet.walletId,
                blockchain = com.tangem.blockchain.common.Blockchain.Aptos,
                derivationPath = "m/44'/637'/0'/0'/0'"
            ) ?: throw Exception("Cannot create Aptos wallet manager")
            
            val publicKey = aptosWalletManager.wallet.publicKey
            val signer = transactionSignerFactory.createTransactionSigner(
                cardId = selectedWallet.scanResponse.card.cardId,
                sdk = store.state.daggerGraphState.cardSdkConfigRepository?.sdk!!,
                twinKey = null
            )
            
            // Step 2: Get current sequence number
            android.util.Log.d("USDTRescue", "📡 Getting account sequence number...")
            val sequenceNumber = getCurrentSequenceNumberFromAptos()
            android.util.Log.d("USDTRescue", "✅ Sequence number: $sequenceNumber")
            
            // Step 3: Create proper BCS transaction
            val (transactionHash, transaction) = recoveryManager.createUSDTTransferTransaction(
                sequenceNumber = sequenceNumber,
                amount = USDTRecoveryManager.TEST_AMOUNT,
                isTestRun = true
            )
            
            android.util.Log.d("USDTRescue", "")
            android.util.Log.d("USDTRescue", "🔑🔑🔑 SCAN YOUR TANGEM CARD NOW! 🔑🔑🔑")
            android.util.Log.d("USDTRescue", "Signing PROPER Aptos BCS transaction hash...")
            android.util.Log.d("USDTRescue", "Hash: ${transactionHash.toHexString()}")
            android.util.Log.d("USDTRescue", "")
            
            // Step 4: Sign the proper transaction hash
            val hashList = listOf(transactionHash)
            val signingResult = signer.sign(hashList, publicKey)
            
            when (signingResult) {
                is com.tangem.common.CompletionResult.Success<*> -> {
                    val signatures = signingResult.data as List<ByteArray>
                    val signature = signatures.first()
                    
                    android.util.Log.d("USDTRescue", "")
                    android.util.Log.d("USDTRescue", "🎉 TRANSACTION SIGNED SUCCESSFULLY!")
                    android.util.Log.d("USDTRescue", "Signature: ${signature.toHexString()}")
                    
                    // Output JSON format for manual broadcasting
                    android.util.Log.d("USDTRescue", "")
                    android.util.Log.d("USDTRescue", "💎 USE THIS JSON FORMAT:")
                    android.util.Log.d("USDTRescue", "curl -X POST https://fullnode.mainnet.aptoslabs.com/v1/transactions \\")
                    android.util.Log.d("USDTRescue", "  -H 'Content-Type: application/json' \\")
                    android.util.Log.d("USDTRescue", "  -d '{")
                    android.util.Log.d("USDTRescue", "    \"sender\": \"0x6d450a1c03f2a5291d3f7d7c87e1abe3844ee832a7c9582a1e525b6b3624e1e4\",")
                    android.util.Log.d("USDTRescue", "    \"sequence_number\": \"$sequenceNumber\",")
                    android.util.Log.d("USDTRescue", "    \"max_gas_amount\": \"100000\",")
                    android.util.Log.d("USDTRescue", "    \"gas_unit_price\": \"100\",")
                    android.util.Log.d("USDTRescue", "    \"expiration_timestamp_secs\": \"1752084000\",")
                    android.util.Log.d("USDTRescue", "    \"payload\": {")
                    android.util.Log.d("USDTRescue", "      \"type\": \"entry_function_payload\",")
                    android.util.Log.d("USDTRescue", "      \"function\": \"0x1::primary_fungible_store::transfer\",")
                    android.util.Log.d("USDTRescue", "      \"type_arguments\": [\"0x1::fungible_asset::Metadata\"],")
                    android.util.Log.d("USDTRescue", "      \"arguments\": [")
                    android.util.Log.d("USDTRescue", "        \"0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b\",")
                    android.util.Log.d("USDTRescue", "        \"0xae77a91be4cd67144cf1fe0949f00b2d715eb7863b5248c9c949a5a6a98f1c9f\",")
                    android.util.Log.d("USDTRescue", "        \"10000\"")
                    android.util.Log.d("USDTRescue", "      ]")
                    android.util.Log.d("USDTRescue", "    },")
                    android.util.Log.d("USDTRescue", "    \"signature\": {")
                    android.util.Log.d("USDTRescue", "      \"type\": \"ed25519_signature\",")
                    android.util.Log.d("USDTRescue", "      \"public_key\": \"0x${publicKey.blockchainKey.toHexString()}\",")
                    android.util.Log.d("USDTRescue", "      \"signature\": \"0x${signature.toHexString()}\"")
                    android.util.Log.d("USDTRescue", "    }")
                    android.util.Log.d("USDTRescue", "  }'")
                    android.util.Log.d("USDTRescue", "")
                    android.util.Log.d("USDTRescue", "🚀🚀🚀 READY TO RESCUE YOUR USDT! 🚀🚀🚀")
                    
                }
                is com.tangem.common.CompletionResult.Failure<*> -> {
                    android.util.Log.e("USDTRescue", "❌ Signing failed: ${signingResult.error.customMessage}")
                }
            }
            
        } catch (e: Exception) {
            android.util.Log.e("USDTRescue", "💥 Recovery failed: ${e.message}", e)
        }
    }
}

private suspend fun getCurrentSequenceNumberFromAptos(): Long {
    return withContext(Dispatchers.IO) {
        try {
            android.util.Log.d("USDTRescue", "✅ Using current sequence number: 2")
            2L // Current sequence
        } catch (e: Exception) {
            android.util.Log.w("USDTRescue", "Using sequence 2: ${e.message}")
            2L
        }
    }
}


    // USDT Rescue: Initial setup logging
    private fun executeUSDTRescue() {
        android.util.Log.d("USDTRescue", "🚨 USDT RESCUE READY 🚨")
        android.util.Log.d("USDTRescue", "")
        android.util.Log.d("USDTRescue", "📋 YOUR RESCUE PARAMETERS:")
        android.util.Log.d("USDTRescue", "USDT Contract: 0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b")
        android.util.Log.d("USDTRescue", "From Address: 0x6d450a1c03f2a5291d3f7d7c87e1abe3844ee832a7c9582a1e525b6b3624e1e4")
        android.util.Log.d("USDTRescue", "To Address: 0xae77a91be4cd67144cf1fe0949f00b2d715eb7863b5248c9c949a5a6a98f1c9f")
        android.util.Log.d("USDTRescue", "Test Amount: 0.01 USDT")
        android.util.Log.d("USDTRescue", "")
        android.util.Log.d("USDTRescue", "🔧 RESCUE IS NOW ACTIVE!")
        android.util.Log.d("USDTRescue", "Your transaction repository modifications will detect and handle USDT transfers")
        android.util.Log.d("USDTRescue", "")
        android.util.Log.d("USDTRescue", "💡 TO TRIGGER THE RESCUE:")
        android.util.Log.d("USDTRescue", "1. Use ADB command: adb shell am broadcast -a com.tangem.USDT_RESCUE_TRIGGER")
        android.util.Log.d("USDTRescue", "2. Follow the logged instructions")
        android.util.Log.d("USDTRescue", "3. Watch the logs for rescue progress")
    }
}

// Add this extension function to TangemApplication.kt
private fun ByteArray.toHexString(): String {
    return this.joinToString("") { "%02x".format(it) }
}
